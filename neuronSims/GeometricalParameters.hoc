// UI
objref hBoxGeometricalParams
// Data vectors
objref vecVolSphereRatio, vecSurfVolRatio, vecDistance, vecVolume, vecSurface, vectDiam, vecDendrDist

// Returns graph with default parameters for all plots.
// $o1 - X data
// $o2 - Y data
// $s3 - Label
// $s4 - Units
// $5 - Boolean. Connect points
obfunc genericGraph() { localobj genericGraph
    genericGraph = new Graph(0)
    genericGraph.yaxis(0)
    genericGraph.label(0.3, 0.1, "distanceToCenter from soma (um)", 2, 1, 0, 1, 1)
    genericGraph.label(0.01, 0.5, $s3, 2, 1, 0, 1, 1)
    genericGraph.label(0.5, 0.8, $s4)
    if ($5 > 0) {
        $o1.plot(genericGraph, $o2)
    }
    $o1.mark(genericGraph, $o2, "+", 10)
    genericGraph.view(0, 0, 0, 0, 0, 0, 300, 200)
    genericGraph.exec_menu("View = plot")
    return genericGraph
}

// Caclculates parameters of the current geometry.
proc calculateGeometricalParams() {local i, distanceToCenter, SectionsInside, VolumeSum, SurfaceSum, Radius, Step, quadDistance, SphereVolume
    vecVolSphereRatio = new Vector()
    vecSurfVolRatio = new Vector()
    vecDistance = new Vector()
    vecVolume = new Vector()
    vecSurface = new Vector()
    vectDiam = new Vector()
    vecDendrDist = new Vector()

    WHERE = 0.5                 // Location in the soma that is the reference point
    soma distance(0, WHERE)     // This sets the origin for distance calculations

    SectionsInside = 0
    VolumeSum = 0               // um^3 volume of the local astrosyte
    SurfaceSum = 0
    Radius = 0
    Step = 2
    distanceToCenter = 0
    NumberOfSections = 10       // Number of Volume calculations. NumberOfSections*Step should be less than 50.

    for i = 1, NumberOfSections {
        forall {
            quadDistance = x3d(1)^2+y3d(1)^2
            
            if (quadDistance > (Radius+Step*(i-1))^2 && (quadDistance < (Radius+Step*i)^2)) {
                SectionsInside += 1
                Volume = PI*L*diam^2/4

                if (diam > 0.2) {
                    Surface = PI*diam*L+2*PI*diam^2/4
                } else {
                    Surface = PI*diam*L
                }
                
                distanceToCenter = sqrt(quadDistance)
                VolumeSum += Volume
                SurfaceSum += Surface
            }

            SphereVolume = 4/3*PI*((distanceToCenter+Step)^3-distanceToCenter^3)
        }

        if (SectionsInside < 2) {
            SectionsInside = 0
        } else {
            vecDistance.append(distanceToCenter)
            vecSurfVolRatio.append(SurfaceSum/VolumeSum)
            vecVolSphereRatio.append(VolumeSum/SphereVolume)
            vecVolume.append(VolumeSum)
            vecSurface.append(SurfaceSum)
        }

        Radius = Radius+Step
        SectionsInside = 0
        VolumeSum = 0
        SurfaceSum = 0
        SphereVolume = 0
    }

    for i = 0, OriginalDendrite {
        dendrite[i] {
            vectDiam.append(diam)
            vecDendrDist.append(sqrt(x3d(1)^2+ y3d(1)^2))
        }
    }
}

// Plots geometrical parameters and show them.
proc plotGeometricalParams() {
    hBoxGeometricalParams = new HBox()
    hBoxGeometricalParams.intercept(1)
    {
        genericGraph(vecSurfVolRatio, vecDistance, "Surface Volume Ratio", "1/um", 1)
        genericGraph(vecVolSphereRatio.log(), vecDistance, "Volume Ratio", "DL", 1)
        genericGraph(vecVolume, vecDistance, "Volume", "um3", 1)
        genericGraph(vecSurface, vecDistance, "Surface", "um2", 1)
        genericGraph(vectDiam, vecDendrDist, "Dendrite diameters", "um", 0)
    }
    hBoxGeometricalParams.intercept(0)
    hBoxGeometricalParams.map("Geometrical Parameters")
}

// Prints geometrical params to file.
// NOTE Call before plotGeometricalParams() because of log() call
// $o1 - File to print data to
proc printGeometricalParamsToFile() { local i
    $o1.printf("L\t\t\tV_Ratio\t\tVolume\t\tSurface\t\tSurface/Volume\n")
    for i=0, vecVolSphereRatio.size()-1 {
        $o1.printf("%-8.4g\t%-8.4g\t%-8.4g\t%-8.4g\t%-8.4g\n", vecDistance.x[i], vecVolSphereRatio.x[i], vecVolume.x[i], vecSurface.x[i], vecSurfVolRatio.x[i])
    }
}

// Calculates and shows parameters of current geometry.
proc GeometricalParameters() { localobj fileForData
    calculateGeometricalParams()

    fileForData = new File()
    fileForData.aopen("VolumFraction.txt")
    printGeometricalParamsToFile(fileForData)
    fileForData.close()

    plotGeometricalParams()
}